###Code for testing the Critic Model

critic = Critic(state_dim, action_dim).to(device)
critic_target = Critic(state_dim, action_dim).to(device)
critic_target.load_state_dict(critic.state_dict())
critic_optimizer = torch.optim.Adam(critic.parameters())
max_action = 5
target_Q1, target_Q2 = critic_target(stateImg, stateValues, predictedAction)

print(target_Q1.shape)
print(target_Q1.cpu().data.numpy().flatten())

print(target_Q2.shape)
print(target_Q2.cpu().data.numpy().flatten())

print(critic_target.Q1(stateImg, stateValues, predictedAction))

### Modified Critic Class

class Critic(nn.Module):

    def __init__(self, state_dim, action_dim):
        super(Critic, self).__init__()

    
        self.convblock1_1 = nn.Sequential(nn.Conv2d(in_channels=1,
                out_channels=8, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(8), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 38

        self.convblock1_2 = nn.Sequential(nn.Conv2d(in_channels=8,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 36

        self.convblock1_3 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # putput_size = 34

        self.pool1_1 = nn.MaxPool2d(2, 2)  # output_size = 17
        self.convblock1_4 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=8, kernel_size=(1, 1), padding=0,
                bias=False), nn.BatchNorm2d(8), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 17

        self.convblock1_5 = nn.Sequential(nn.Conv2d(in_channels=8,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 15

        self.convblock1_6 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=32, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(32), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 13

        self.convblock1_7 = nn.Sequential(nn.Conv2d(in_channels=32,
                out_channels=32, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(32), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 11

        self.GAP1_1 = nn.Sequential(nn.AdaptiveAvgPool2d((1, 1)))

    
        self.fc1_1 = nn.Linear(state_dim - 1 + 32 + action_dim, 400)
        self.fc1_2 = nn.Linear(400, 300)
        self.fc1_3 = nn.Linear(300, 1)

    
        self.convblock2_1 = nn.Sequential(nn.Conv2d(in_channels=1,
                out_channels=8, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(8), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 38

        self.convblock2_2 = nn.Sequential(nn.Conv2d(in_channels=8,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 36

        self.convblock2_3 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # putput_size = 34

        self.pool2_1 = nn.MaxPool2d(2, 2)  # output_size = 17
        self.convblock2_4 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=8, kernel_size=(1, 1), padding=0,
                bias=False), nn.BatchNorm2d(8), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 17

        self.convblock2_5 = nn.Sequential(nn.Conv2d(in_channels=8,
                out_channels=16, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(16), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 15

        self.convblock2_6 = nn.Sequential(nn.Conv2d(in_channels=16,
                out_channels=32, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(32), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 13

        self.convblock2_7 = nn.Sequential(nn.Conv2d(in_channels=32,
                out_channels=32, kernel_size=(3, 3), padding=0,
                bias=False), nn.BatchNorm2d(32), nn.ReLU(),
                nn.Dropout(0.1))  # output_size = 11

        self.GAP2_1 = nn.Sequential(nn.AdaptiveAvgPool2d((1, 1)))

    
        self.fc2_1 = nn.Linear(state_dim - 1 + 32 + action_dim, 400)
        self.fc2_2 = nn.Linear(400, 300)
        self.fc2_3 = nn.Linear(300, 1)

    def forward(self, state_img, state_val, action):

    
        x1 = self.convblock1_1(state_img)
        x1 = self.convblock1_2(x1)
        x1 = self.convblock1_3(x1)
        x1 = self.pool1_1(x1)
        x1 = self.convblock1_4(x1)
        x1 = self.convblock1_5(x1)
        x1 = self.convblock1_6(x1)
        x1 = self.convblock1_7(x1)
        x1 = self.GAP1_1(x1)
        x1 = x1.view(-1, 32)

    
        x1 = torch.cat([x1, state_val, action], 1)
        x1 = F.relu(self.fc1_1(x1))
        x1 = F.relu(self.fc1_2(x1))
        x1 = self.fc1_3(x1)

    
        x2 = self.convblock2_1(state_img)
        x2 = self.convblock2_2(x2)
        x2 = self.convblock2_3(x2)
        x2 = self.pool2_1(x2)
        x2 = self.convblock2_4(x2)
        x2 = self.convblock2_5(x2)
        x2 = self.convblock2_6(x2)
        x2 = self.convblock2_7(x2)
        x2 = self.GAP2_1(x2)
        x2 = x2.view(-1, 32)

    
        x2 = torch.cat([x2, state_val, action], 1)
        x2 = F.relu(self.fc2_1(x2))
        x2 = F.relu(self.fc2_2(x2))
        x2 = self.fc2_3(x2)

        return (x1, x2)

    def Q1(self, state_img, state_val, action):

    
        x1 = self.convblock1_1(state_img)
        x1 = self.convblock1_2(x1)
        x1 = self.convblock1_3(x1)
        x1 = self.pool1_1(x1)
        x1 = self.convblock1_4(x1)
        x1 = self.convblock1_5(x1)
        x1 = self.convblock1_6(x1)
        x1 = self.convblock1_7(x1)
        x1 = self.GAP1_1(x1)
        x1 = x1.view(-1, 32)

    
        x1 = torch.cat([x1, state_val, action], 1)
        x1 = F.relu(self.fc1_1(x1))
        x1 = F.relu(self.fc1_2(x1))
        x1 = self.fc1_3(x1)

        return x1